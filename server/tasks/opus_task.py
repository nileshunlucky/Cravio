import uuid
import os
import boto3
import requests
from datetime import datetime
from db import users_collection
from celery_config import celery_app
import fal_client
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configure AWS S3
S3_BUCKET = os.getenv("S3_BUCKET_NAME", "my-video-bucket")
s3_client = boto3.client(
    "s3",
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
    region_name=os.getenv("AWS_REGION", "us-east-1"),
)

# Configure fal.ai client
fal_client.api_key = os.getenv("FAL_KEY")

AURA_COSTS = {"veo3": 400, "kling2.1 master": 200}

def delete_temp_image_from_s3(image_url: str) -> bool:
    """Delete temporary image from S3 after video processing"""
    try:
        if not image_url or not image_url.startswith(f"https://{S3_BUCKET}.s3.amazonaws.com/"):
            return False
        
        # Extract S3 key from URL
        s3_key = image_url.replace(f"https://{S3_BUCKET}.s3.amazonaws.com/", "")
        
        # Only delete temp images (safety check)
        if not s3_key.startswith("temp_images/"):
            return False
        
        # Delete from S3
        s3_client.delete_object(Bucket=S3_BUCKET, Key=s3_key)
        print(f"Deleted temp image: {s3_key}")
        return True
        
    except Exception as e:
        print(f"Failed to delete temp image: {str(e)}")
        return False


def upload_video_to_s3(video_url: str, email: str, model: str) -> str:
    """Download video from URL and upload to S3"""
    try:
        # Download video from fal.ai
        response = requests.get(video_url, stream=True)
        response.raise_for_status()
        
        # Generate unique filename
        unique_id = uuid.uuid4().hex[:8]
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        s3_key = f"videos/{email}/{model}_{timestamp}_{unique_id}.mp4"
        
        # Upload to S3
        s3_client.put_object(
            Bucket=S3_BUCKET,
            Key=s3_key,
            Body=response.content,
            ContentType="video/mp4",
        )
        
        # Return S3 URL
        return f"https://{S3_BUCKET}.s3.amazonaws.com/{s3_key}"
        
    except Exception as e:
        raise Exception(f"Failed to upload video to S3: {str(e)}")

def save_video_to_db(email: str, model: str, prompt: str, video_url: str, s3_url: str, image_url: str = None):
    """Save video generation details to database"""
    try:
        video_doc = {
            "id": uuid.uuid4().hex,
            "email": email,
            "model": model,
            "prompt": prompt,
            "image_url": image_url,
            "fal_video_url": video_url,
            "s3_url": s3_url,
            "created_at": datetime.utcnow(),
            "status": "completed"
        }
        
        users_collection.insert_one(video_doc)
        return video_doc["id"]
        
    except Exception as e:
        raise Exception(f"Failed to save video to database: {str(e)}")

@celery_app.task(bind=True)
def veo3(self, prompt: str, email: str, aspect_ratio: str, image_url: str = None):
    """Generate video using VEO-3 model via fal.ai"""
    try:
        # Update task status
        self.update_state(state='PROGRESS', meta={'status': 'Generating video with VEO-3...', 'progress': 10})
        
        # Prepare request parameters for VEO-3
        request_data = {
            "prompt": prompt,
            "duration": "8",  # VEO-3 supports up to 8 seconds
            "aspect_ratio": aspect_ratio,
            "loop": False
        }
        
        # Add image if provided (image-to-video)
        if image_url:
            request_data["image_url"] = image_url
            api_endpoint = "fal-ai/veo2/image-to-video"
        else:
            api_endpoint = "fal-ai/veo-3"
        
        # Call fal.ai VEO-3 API
        result = fal_client.subscribe(
            api_endpoint,
            arguments=request_data,
            with_logs=True,
        )
        
        if not result or "video" not in result:
            raise Exception("No video generated by VEO-3")
        
        video_url = result["video"]["url"]
        
        # Upload to S3
        self.update_state(state='PROGRESS', meta={'status': 'Uploading video to S3...', 'progress': 50})
        s3_url = upload_video_to_s3(video_url, email, "veo3")
        
        # Save to database
        self.update_state(state='PROGRESS', meta={'status': 'Saving to database...', 'progress': 80})
        video_id = save_video_to_db(email, "veo3", prompt, video_url, s3_url, image_url)

        # Clean up temp image after successful processing
        if image_url:
            delete_temp_image_from_s3(image_url)
        
        return {
            'status': 'SUCCESS',
            'video_id': video_id,
            's3_url': s3_url,
            'fal_url': video_url
        }
        
    except Exception as e:
        # Clean up temp image on failure
        if image_url:
            delete_temp_image_from_s3(image_url)

        # Update user aura on failure (refund)
        users_collection.update_one({"email": email}, {"$inc": {"aura": AURA_COSTS["veo3"]}})
        
        self.update_state(
            state='FAILURE',
            meta={'error': str(e), 'status': 'Video generation failed', 'progress': 100}
        )
        raise Exception(f"VEO-3 generation failed: {str(e)}")

@celery_app.task(bind=True)
def kling2_1master(self, prompt: str, email: str, aspect_ratio: str, image_url: str = None):
    """Generate video using Kling 2.1 Master model via fal.ai"""
    try:
        # Update task status
        self.update_state(state='PROGRESS', meta={'status': 'Generating video with Kling 2.1 Master...', 'progress': 10})
        
        # Prepare request parameters for Kling 2.1 Master
        request_data = {
            "prompt": prompt,
            "duration": "10",  # Kling supports 5s or 10s
            "aspect_ratio": aspect_ratio,
            "camera_control": {
                "type": "none"  # Options: none, pan, tilt, zoom, orbit
            }
        }
        
        # Add image if provided (image-to-video)
        if image_url:
            # Image-to-video mode
            request_data["image_url"] = image_url
            api_endpoint = "fal-ai/kling-video/v2.1/master/image-to-video"
        else:
            # Text-to-video mode - use different endpoint
            api_endpoint = "fal-ai/kling-video/v2/master/text-to-video"
        
        # Call fal.ai Kling 2.1 Master API
        result = fal_client.subscribe(
            api_endpoint,
            arguments=request_data,
            with_logs=True,
        )
        
        if not result or "video" not in result:
            raise Exception("No video generated by Kling 2.1 Master")
        
        video_url = result["video"]["url"]
        
        # Upload to S3
        self.update_state(state='PROGRESS', meta={'status': 'Uploading video to S3...', 'progress': 50})
        s3_url = upload_video_to_s3(video_url, email, "kling2_1master")
        
        # Save to database
        self.update_state(state='PROGRESS', meta={'status': 'Saving to database...', 'progress': 80})
        video_id = save_video_to_db(email, "kling2.1 master", prompt, video_url, s3_url, image_url)

        # Clean up temp image after successful processing
        if image_url:
            delete_temp_image_from_s3(image_url)
        
        return {
            'status': 'SUCCESS',
            'video_id': video_id,
            's3_url': s3_url,
            'fal_url': video_url
        }
        
    except Exception as e:
        # Clean up temp image on failure
        if image_url:
            delete_temp_image_from_s3(image_url)

        # Update user aura on failure (refund)
        users_collection.update_one({"email": email}, {"$inc": {"aura": AURA_COSTS["kling2_1master"]}})
        
        self.update_state(
            state='FAILURE',
            meta={'error': str(e), 'status': 'Video generation failed', 'progress': 100}
        )
        raise Exception(f"Kling 2.1 Master generation failed: {str(e)}")

